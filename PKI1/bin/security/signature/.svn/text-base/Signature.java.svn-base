package security.signature;
import java.io.BufferedInputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PrivateKey;
import java.security.Security;
import java.security.UnrecoverableKeyException;
import java.security.cert.Certificate;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;

import org.apache.xml.security.exceptions.XMLSecurityException;
import org.apache.xml.security.keys.KeyInfo;
import org.apache.xml.security.keys.keyresolver.implementations.RSAKeyValueResolver;
import org.apache.xml.security.keys.keyresolver.implementations.X509CertificateResolver;
import org.apache.xml.security.signature.XMLSignature;
import org.apache.xml.security.signature.XMLSignatureException;
import org.apache.xml.security.transforms.TransformationException;
import org.apache.xml.security.transforms.Transforms;
import org.apache.xml.security.utils.Constants;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.w3c.dom.DOMException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

import rs.ac.uns.ftn.informatika.sertifikati.certificate.CertificateVerifier;

public class Signature {
	
	 static {
	    	//staticka inicijalizacija
	        Security.addProvider(new BouncyCastleProvider());
	        org.apache.xml.security.Init.init();
	    }
	
	
	public static Document signDocument(Document doc, PrivateKey privateKey, Certificate cert) {
		
	    
		try {
			Element rootEl = doc.getDocumentElement();
			//kreira se signature objekat
			XMLSignature sig = new XMLSignature(doc, null, XMLSignature.ALGO_ID_SIGNATURE_RSA_SHA1);
			//kreiraju se transformacije nad dokumentom
			Transforms transforms = new Transforms(doc);
			    
			//iz potpisa uklanja Signature element
			//Ovo je potrebno za enveloped tip po specifikaciji
			transforms.addTransform(Transforms.TRANSFORM_ENVELOPED_SIGNATURE);
			//normalizacija
			transforms.addTransform(Transforms.TRANSFORM_C14N_WITH_COMMENTS);
			    
			//potpisuje se citav dokument (URI "")
			sig.addDocument("", transforms, Constants.ALGO_ID_DIGEST_SHA1);
			    
			//U KeyInfo se postavalja Javni kljuc samostalno i citav sertifikat
			sig.addKeyInfo(cert.getPublicKey());
			sig.addKeyInfo((X509Certificate) cert);
			    
			//poptis je child root elementa
			rootEl.appendChild(sig.getElement());
			    
			//potpisivanje
			sig.sign(privateKey);
			
			return doc;
			
		} catch (TransformationException e) {
			e.printStackTrace();
			return null;
		} catch (XMLSignatureException e) {
			e.printStackTrace();
			return null;
		} catch (DOMException e) {
			e.printStackTrace();
			return null;
		} catch (XMLSecurityException e) {
			e.printStackTrace();
			return null;
		}
	}
	
		public static boolean verifySignature(Document doc,String name,String pass) {
		  try {
		   //Pronalazi se prvi Signature element 
		   NodeList signatures = doc.getElementsByTagNameNS("http://www.w3.org/2000/09/xmldsig#", "Signature");
		   Element signatureEl = (Element) signatures.item(0);
		   
		   //kreira se signature objekat od elementa
		   XMLSignature signature = new XMLSignature(signatureEl, null);
		   //preuzima se key info
		   KeyInfo keyInfo = signature.getKeyInfo();
		   //ako postoji
		   if(keyInfo != null) {
		    //registruju se resolver-i za javni kljuc i sertifikat
		    keyInfo.registerInternalKeyResolver(new RSAKeyValueResolver());
		       keyInfo.registerInternalKeyResolver(new X509CertificateResolver());
		       
		       //ako sadrzi sertifikat
		       if(keyInfo.containsX509Data() && keyInfo.itemX509Data(0).containsCertificate()) { 
		           Certificate cert = keyInfo.itemX509Data(0).itemCertificate(0).getX509Certificate();
		           //ako postoji sertifikat, provera potpisa
		           if(cert != null) 
		            return signature.checkSignatureValue((X509Certificate) cert);
		           else
		            return false;
		       }
		       else
		        return false;
		   }
		   else
		    return false;
		  
		  } catch (XMLSignatureException e) {
		   e.printStackTrace();
		   return false;
		  } catch (XMLSecurityException e) {
		   e.printStackTrace();
		   return false;
		  }
		 }
	
	/**
	 * Ucitava sertifikat is KS fajla
	 * alias primer
	 */
	public static Certificate readCertificate(String alias, String keyStoreLocation) {
		try {
			//kreiramo instancu KeyStore
			KeyStore ks = KeyStore.getInstance("JKS", "SUN");
			//ucitavamo podatke
			BufferedInputStream in = new BufferedInputStream(new FileInputStream(keyStoreLocation));
			ks.load(in, alias.toCharArray());
			
			if(ks.isKeyEntry(alias)) {
				Certificate cert = ks.getCertificate(alias);
				return cert;
				
			}
			else
				return null;
			
		} catch (KeyStoreException e) {
			e.printStackTrace();
			return null;
		} catch (NoSuchProviderException e) {
			e.printStackTrace();
			return null;
		} catch (FileNotFoundException e) {
			e.printStackTrace();
			return null;
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
			return null;
		} catch (CertificateException e) {
			e.printStackTrace();
			return null;
		} catch (IOException e) {
			e.printStackTrace();
			return null;
		} 
	}
	/**
	 * Ucitava privatni kljuc is KS fajla
	 * alias primer
	 */
	public static PrivateKey readPrivateKey(String alias,String keyStoreLocation) {
		try {
			//kreiramo instancu KeyStore
			KeyStore ks = KeyStore.getInstance("JKS", "SUN");
			//ucitavamo podatke
			BufferedInputStream in = new BufferedInputStream(new FileInputStream(keyStoreLocation));
			ks.load(in, alias.toCharArray());
			
			if(ks.isKeyEntry(alias)) {
				PrivateKey pk = (PrivateKey) ks.getKey(alias, alias.toCharArray());
				return pk;
			}
			else
				return null;
			
		} catch (KeyStoreException e) {
			e.printStackTrace();
			return null;
		} catch (NoSuchProviderException e) {
			e.printStackTrace();
			return null;
		} catch (FileNotFoundException e) {
			e.printStackTrace();
			return null;
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
			return null;
		} catch (CertificateException e) {
			e.printStackTrace();
			return null;
		} catch (IOException e) {
			e.printStackTrace();
			return null;
		} catch (UnrecoverableKeyException e) {
			e.printStackTrace();
			return null;
		} 
	}
}
